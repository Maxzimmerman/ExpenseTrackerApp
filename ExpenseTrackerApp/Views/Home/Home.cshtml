@using ExpenseTrackerApp.Models.ViewModels.TransactionViewModels
@using System.Text.Json
@model ExpenseTrackerApp.Models.ViewModels.HomeViewModel

<body class="dashboard">
<div id="main-wrapper">
    <div class="content-body">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="page-title">
                        <div class="row align-items-center justify-content-between">
                            <div class="col-xl-4">
                                <div class="page-title-content">
                                    <h3>Dashboard</h3>
                                    <p class="mb-2">Welcome Trackify Finance Management</p>
                                </div>
                            </div>
                            <div class="col-auto">
                                <div class="breadcrumbs">
                                    <a asp-controller="Home" asp-action="Home">Dashboard</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-xl-4 col-lg-6 col-md-6 col-sm-6">
                    @{
                        string textColor;
                        string upOrDown = "";
                        if (@Model.TotalBalanceDataViewModel.DifferenceFromLastToCurrentMonthPercentage > 0)
                        {
                            textColor = "success";
                            upOrDown = "up";
                        }

                        else if (@Model.TotalBalanceDataViewModel.DifferenceFromLastToCurrentMonthPercentage < 0)
                        {
                            textColor = "danger";
                            upOrDown = "down";
                        }
                        else
                            textColor = "secondary";

                        <div class="stat-widget-1">
                            <h6>Total Balance</h6>
                            <h3>$ @Model.TotalBalanceDataViewModel.TotalBalance</h3>
                            <p>
                                <span class="text-@textColor"><i
                                        class="fi fi-rr-arrow-trend-@upOrDown"></i>@Model.TotalBalanceDataViewModel.DifferenceFromLastToCurrentMonthPercentage %</span>
                                Last month <strong>$@Model.TotalBalanceDataViewModel.BalanceLastMonth</strong>
                            </p>
                        </div>
                    }
                </div>
                
                <div class="col-xl-4 col-lg-6 col-md-6 col-sm-6">
                    <div class="stat-widget-1">
                        @{
                            string textColorExpense;
                            string upOrDownExpense = "";
                            if (@Model.TotalPeriodExpensesDataViewModel.DifferenceBetweenThisAndLastMonth > 0)
                            {
                                textColorExpense = "success";
                                upOrDownExpense = "up";
                            }
                            else if (@Model.TotalPeriodExpensesDataViewModel.DifferenceBetweenThisAndLastMonth < 0)
                            {
                                textColorExpense = "danger";
                                upOrDownExpense = "down";
                            }
                            else
                                textColorExpense = "secondary";
                        }
                        <h6>Total Period Expenses</h6>
                        <h3>$ @Model.TotalPeriodExpensesDataViewModel.TotalAmountOfExpenses</h3>
                        <p>
                            <span class="text-@textColorExpense"><i
                                    class="fi fi-rr-arrow-trend-@upOrDownExpense"></i>@Model.TotalPeriodExpensesDataViewModel.DifferenceBetweenThisAndLastMonth%</span>
                            Last month
                            <strong>$@Model.TotalPeriodExpensesDataViewModel.AmountOfExpensesLastMonth</strong>
                        </p>
                    </div>
                </div>

                <div class="col-xl-4 col-lg-12 col-md-12 col-sm-6">
                    <div class="stat-widget-1">
                        @{
                            string textColorIncome;
                            string upOrDownIncome = "";
                            if (@Model.TotalPeriotIncomeDateViewModel.DifferenceBetweenThisAndLastMonth > 0)
                            {
                                textColorIncome = "success";
                                upOrDownIncome = "up";
                            }

                            else if (@Model.TotalPeriotIncomeDateViewModel.DifferenceBetweenThisAndLastMonth < 0)
                            {
                                textColorIncome = "danger";
                                upOrDownIncome = "down";
                            }
                            else
                                textColorIncome = "secondary";

                            <h6>Total Period Income</h6>
                            <h3>$ @Model.TotalPeriotIncomeDateViewModel.TotalIncomeAmount</h3>
                            <p>
                                <span class="text-@textColorIncome"><i
                                        class="fi fi-rr-arrow-trend-@upOrDownIncome"></i>@Model.TotalPeriotIncomeDateViewModel.DifferenceBetweenThisAndLastMonth %</span>
                                Last month
                                <strong>$@Model.TotalPeriotIncomeDateViewModel.ExpenseAmountLastMonth</strong>
                            </p>
                        }
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-xxl-8 col-xl-8 col-lg-6">
                    <div class="card">
                        <div class="card-header balance-trend">
                            <h4 class="card-title">Balace Trends <br>
                                <span>@Model.BalanceTrendsViewModel.Balance$</span></h4>
                            <div class="trend-stats">
                                <p class="mb-0">Last Month</p>
                                @{
                                    if (@Model.BalanceTrendsViewModel.BalancePercentage < 0)
                                    {
                                        <span class="text-danger">
                                            <i class="fi fi-rr-arrow-trend-down"></i>
                                            @Model.BalanceTrendsViewModel.BalancePercentage%
                                        </span>
                                    }
                                    else if (@Model.BalanceTrendsViewModel.BalancePercentage > 0)
                                    {
                                        <span class="text-success">
                                            <i class="fi fi-rr-arrow-trend-up"></i>
                                            @Model.BalanceTrendsViewModel.BalancePercentage%
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-secondary">
                                            @Model.BalanceTrendsViewModel.BalancePercentage%
                                        </span>
                                    }
                                }

                            </div>
                        </div>
                        <div class="card-body">
                            <canvas id="chartjsMonthlyExpenses"></canvas>
                        </div>
                    </div>
                </div>
                <div class=" col-xxl-4 col-xl-4 col-lg-6 col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">Monthly Expenses Breakdown</h4>
                        </div>
                        <div class="card-body">
                            <div class="progress-stacked">
                                @{
                                    var colors = new List<string>() { "orange", "amber", "yellow", "lime", "green", "cyan", "stone" };
                                    for (int i = 0; i < Model.ExpenseAndIncomeCategories.Count(); i++)
                                    {
                                        <div class="progress"
                                             style="width: @Model.ExpenseAndIncomeCategories[i].Percentage%">
                                            <div class="progress-bar bg-@colors[i]-500"></div>
                                        </div>
                                    }
                                }
                            </div>
                            <div class="list-1 mt-3">
                                <ul>
                                    @{
                                        foreach (var categoryData in Model.ExpenseAndIncomeCategories)
                                        {
                                            <li>
                                                <p class="mb-0"><i
                                                        class="fi fi-ss-circle text-orange-500"></i>@categoryData.Title
                                                </p>
                                                <h5 class="mb-0">
                                                    <span>$@categoryData.Amount</span>@categoryData.Percentage%</h5>
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-4 col-lg-6 col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">Monthly Budgets</h4>
                        </div>
                        <div class="card-body">
                            <div class="budget-content">
                                <ul>
                                    @{
                                        foreach (var monhtlyBudgetEntry in Model.MonthyBudgetEntries)
                                        {
                                            <li>
                                                <div class="budget-info flex-grow-2 me-3">
                                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                                        <h5 class="mb-1"><i
                                                                class="bg-green-500 fi fi-rr-carrot"></i>@monhtlyBudgetEntry.Name
                                                        </h5>
                                                        <p class="mb-0">
                                                            <strong>@monhtlyBudgetEntry.SpendAmount </strong>/ @monhtlyBudgetEntry.BudgetAmount
                                                        </p>
                                                    </div>
                                                    <div class="progress">
                                                        <div class="progress-bar bg-green-500" role="progressbar"
                                                             style="width: @monhtlyBudgetEntry.SpendPercentage%;">
                                                        </div>
                                                    </div>
                                                </div>
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class=" col-xxl-8 col-xl-8 col-lg-6 col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">Monthly Income vs Expenses</h4>
                        </div>
                        <div class="card-body">
                            <canvas id="chartjsIncomeVsExpense"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <partial name="~/Views/Footer/_Footer.cshtml"/>
</div>
<script>
    //Transaction Graph 
    setTimeout(() => {
        var incomes = @Html.Raw(Json.Serialize(Model.IncomeVsExpensesData.incomsChartData));
        var expenses = @Html.Raw(Json.Serialize(Model.IncomeVsExpensesData.expensesChartData));
        var ctx = document.getElementById("chartjsIncomeVsExpense")
        ctx.height = 100
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                datasets: [{
                    label: 'Incomes',
                    data: incomes,
                    backgroundColor: 'rgba(47, 44, 216,1)',
                },
                    {
                        label: 'Expenses',
                        data: expenses,
                        backgroundColor: 'rgba(47, 44, 216,0.2)',
                    }]
            },
            options: {
                responsive: !0,
                maintainAspectRatio: false,
                legend: {
                    display: false
                },
                scales: {
                    xAxes: [{
                        gridLines: {
                            drawBorder: false,
                            display: false
                        },
                        ticks: {
                            display: true, // hide main x-axis line
                            beginAtZero: true
                        },
                        barPercentage: 1,
                        categoryPercentage: 0.5
                    }],
                    yAxes: [{
                        gridLines: {
                            drawBorder: false, // hide main y-axis line
                            display: false
                        },
                        ticks: {
                            display: true,
                            beginAtZero: true
                        },
                    }]
                },
                tooltips: {
                    enabled: true
                }
            }
        })
    }, 100);
</script>
<script>
    // Transaction Graph
    setTimeout(() => {
        var ctx = document.getElementById("chartjsMonthlyExpenses");
        ctx.height = 300;

        // Data passed from the server
        var monthlyExpenses = @Html.Raw(JsonSerializer.Serialize(Model.BalanceTrendsViewModel.Balances));

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                datasets: [{
                    label: 'Monthly Balance',
                    data: monthlyExpenses,
                    backgroundColor: 'rgba(75, 192, 192, 1)', // Fixed color for consistency
                    borderColor: 'rgba(75, 192, 192, 0.2)', // Border color
                    borderWidth: 1
                }]
            },
            options: {
                responsive: !0,
                maintainAspectRatio: false,
                legend: {
                    display: false
                },
                scales: {
                    xAxes: [{
                        stacked: true,
                        gridLines: {
                            drawBorder: false,
                            display: false
                        },
                        ticks: {
                            display: true, // hide main x-axis line
                            beginAtZero: true
                        },
                        barPercentage: 2,
                        categoryPercentage: 0.2
                    }],
                    yAxes: [{
                        stacked: true,
                        gridLines: {
                            drawBorder: false, // hide main y-axis line
                            display: false
                        },
                        ticks: {
                            display: true,
                            beginAtZero: true
                        },
                    }]
                },
                tooltips: {
                    enabled: true
                }
            }
        });
    }, 100);
</script>
</body>
